{% extends '_base.jinja2' %}
{% import '_your_vote.jinja2' as your_vote %}
{% block body %}

    <div class="row mb-3">
        <div class="col">

            <div class="card">
                <div class="card-header d-flex align-items-center">
                    {% if vote.result.teo_stars == 0 and vote.result.users_stars >= 2 %}
                        <img src="/static/img/laugh.png" height="48">
                    {% elif vote.result.teo_stars >= 2 and vote.result.users_stars == 0 %}
                        <img src="/static/img/teo-gold.png" height="48" style="transform: scale(1.75)">
                    {% else %}
                        <img src="/static/img/teo.png" height="48">
                    {% endif %}

                    <h3 class="mb-0 ms-3">
                        Teo

                        {% for _ in range(vote.result.teo_stars) %}
                            🌟
                        {% endfor %}
                    </h3>
                </div>
                <div class="card-body py-1">
                    {{ your_vote.new(vote.teo_rank, vote) }}
                </div>
            </div>

        </div>
        <div class="col">

            <div class="card">
                <div class="card-header d-flex align-items-center">
                    <img src="{{ url_for('static', path='/img/chat.png') }}" height="48">
                    <h3 class="mb-0 ms-3">
                        Chat

                        {% for _ in range(vote.result.users_stars) %}
                            🌟
                        {% endfor %}
                    </h3>
                    <p class="mb-0 ms-auto">Total votes: <b>{{ vote.total_users_votes }}</b></p>
                </div>
                <div class="card-body py-1">
                    {{ your_vote.new(vote.result.users_rank, vote) }}
                </div>
            </div>

        </div>
    </div>

    <div class="mb-4">
        <canvas id="chart" style="height: 550px"></canvas>
    </div>

    <div class="row g-2">
        <div class="col-auto">
            <a class="btn border rounded btn-link text-decoration-none"
               href="{{ vote.clip.url }}"
               target="_blank"
               referrerpolicy="no-referrer">
                Clip link
            </a>

            <div class="btn border rounded">
                Clip {{ vote.clip_idx + 1 }} of {{ vote.clips.__len__() }}
            </div>

            <div class="btn border-rainbow rounded">
                by <b class="clip-credits">{{ vote.clip.credits }}</b>
            </div>
        </div>

        <div class="col">
            {% if vote.has_next_clip %}
                <form class="text-end" action="/next_clip" method="post">
                    <input type="hidden" name="clip_idx" value="{{ vote.clip_idx }}">
                    <input type="submit" class="btn btn-primary" value="Next clip ▶️">
                </form>
            {% else %}
                <form class="text-start" action="/next_clip" method="post">
                    <input type="hidden" name="clip_idx" value="{{ vote.clip_idx }}">
                    <input type="submit" class="btn btn-secondary" value="Finish">
                </form>
            {% endif %}
        </div>
    </div>


{% endblock %}
{% block script %}

    <script>
        const canvas = document.getElementById('chart')
        const ctx = canvas.getContext('2d')

        const urlToImage = (url, width, height) => {
            let image = new Image(width, height)
            image.src = url
            return image
        }

        const titleCase = text => {
            return text.toLowerCase().replace(/(^|\s)\S/g, L => L.toUpperCase())
        }

        const shadeColor = (color, percent) => {

            var R = parseInt(color.substring(1, 3), 16);
            var G = parseInt(color.substring(3, 5), 16);
            var B = parseInt(color.substring(5, 7), 16);

            R = parseInt(R * (100 + percent) / 100);
            G = parseInt(G * (100 + percent) / 100);
            B = parseInt(B * (100 + percent) / 100);

            R = (R < 255) ? R : 255;
            G = (G < 255) ? G : 255;
            B = (B < 255) ? B : 255;

            R = Math.round(R / 10) * 10
            G = Math.round(G / 10) * 10
            B = Math.round(B / 10) * 10

            var RR = ((R.toString(16).length == 1) ? "0" + R.toString(16) : R.toString(16));
            var GG = ((G.toString(16).length == 1) ? "0" + G.toString(16) : G.toString(16));
            var BB = ((B.toString(16).length == 1) ? "0" + B.toString(16) : B.toString(16));

            return "#" + RR + GG + BB;
        }

        const makeGradient = color => {
            const grad = ctx.createLinearGradient(0, 0, 0, canvas.style.height.slice(0, -2))
            grad.addColorStop(0, shadeColor(color, 10))
            grad.addColorStop(0.4, color)
            grad.addColorStop(1, shadeColor(color, -22))

            return grad
        }

        const data = {
            labels: [
                {% for rank in vote.clip.ranks %}
                    "{{ rank.title }}",
                {% endfor %}
            ],

            datasets: [{
                data: [
                    {% for rank in vote.clip.ranks %}
                        {% if vote.result.users_rank_percentages[rank] %}
                            {{ vote.result.users_rank_percentages[rank] }},
                        {% else %}
                            0.00499,
                        {% endif %}
                    {% endfor %}
                ],

                backgroundColor: [
                    {% for rank in vote.clip.ranks %}
                        {% if rank.raw == vote.clip.answer.raw %}
                            makeGradient("#60935D"),
                        {% else %}
                            makeGradient("#036E99"),
                        {% endif %}
                    {% endfor %}

                ],

                borderColor: [
                    {% for rank in vote.clip.ranks %}
                        {% if rank.raw == vote.clip.answer.raw %}
                            "#FCE658",
                        {% else %}
                            "transparent",
                        {% endif %}
                    {% endfor %}

                ]
            }]
        }

        const annotations = [
            {% for rank in vote.clip.ranks %}
                {% if rank.image.path.exists() %}
                    {
                        type: 'line',
                        scaleID: 'x',
                        value: '{{ rank.title }}',

                        borderWidth: 0,

                        label: {
                            display: true,
                            content: urlToImage('/rank/{{ rank.raw }}', {{ rank.image.width }}, {{ rank.image.height }}),
                            backgroundColor: 'rgba(0,0,0,0)',
                            padding: 0,
                            position: '92.5%'
                        }
                    },
                {% endif %}
            {% endfor %}
            {
                type: 'line',
                scaleID: 'x',
                value: '{{ vote.teo_rank.title }}',

                borderWidth: 0,

                label: {
                    display: true,
                    content: urlToImage('{{ url_for('static', path='/img/teo.png') }}', 48, 48),
                    backgroundColor: 'rgba(0,0,0,0)',
                    padding: 0,
                    position: '92.5%',
                    xAdjust: -28,
                    yAdjust: -30
                }
            },
            {
                type: 'line',
                scaleID: 'x',
                value: '{{ vote.result.users_rank.title }}',

                borderWidth: 0,

                label: {
                    display: true,
                    content: urlToImage('{{ url_for('static', path='/img/chat.png') }}', 48, 48),
                    backgroundColor: 'rgba(0,0,0,0)',
                    padding: 0,
                    position: '92.5%',
                    xAdjust: +28,
                    yAdjust: -30
                }
            },
        ]

        const rankUsers = {
            {% for rank in vote.clip.ranks %}
                '{{ rank.title }}': [
                {% for username in vote.result.users_rank_users[rank] %}
                    '{{ username }}',
                {% endfor %}
                ],
            {% endfor %}
        }

        const chart = new Chart(ctx, {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,

                hoverBackgroundColor: data.datasets[0].backgroundColor,

                barPercentage: 0.85,
                borderWidth: 3,
                borderRadius: {
                    topLeft: 6,
                    topRight: 6
                },

                scales: {
                    x: {
                        grid: {
                            display: false
                        },

                        ticks: {
                            font: {
                                size: 20
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,

                        ticks: {
                            font: {
                                size: 16
                            },

                            callback: value => `${(value * 100).toFixed(0)}%`,
                        }
                    }
                },

                plugins: {
                    annotation: {
                        annotations: annotations
                    },

                    legend: {
                        display: false
                    },

                    tooltip: {
                        padding: {
                            x: 16,
                            y: 8
                        },
                        displayColors: false,
                        xAlign: 'center',

                        titleAlign: 'center',
                        titleFont: {
                            size: 16
                        },

                        bodyAlign: 'center',
                        bodyFont: {
                            size: 18
                        },

                        callbacks: {
                            title: ctxs => {
                                if (ctxs.length !== 1)
                                    return

                                const ctx = ctxs[0]

                                return `${ctx.label}: ${(ctx.raw * 100).toFixed(0)}%`
                            },

                            label: () => '',

                            afterBody: ctxs => {
                                if (ctxs.length !== 1)
                                    return

                                const ctx = ctxs[0]
                                const users = rankUsers[ctx.label]

                                if (users.length === 0)
                                    return

                                const renderSize = 5
                                const render = users.slice(0, renderSize)
                                const restSize = users.length - renderSize

                                if (restSize > 0)
                                    render.push(`…and ${restSize} more`)

                                return render.join('\n')
                            }
                        }
                    }
                }
            }
        })

    </script>

{% endblock %}
